#!/usr/bin/env python3
import configparser
import os

import click
import dataset
from prettytable import PrettyTable




def read_default_config():
    cfg_path = os.path.expanduser('~/.gtd_cfg')

    if not os.path.isfile(cfg_path):
        click.echo('no config found!')

    parser = configparser.ConfigParser()
    parser.read(cfg_path)
    return parser


cfg = read_default_config()
db_filepath = os.path.expanduser(cfg.get('default', 'db_file'))
conn_str = 'sqlite:///{}'.format(db_filepath)
db = dataset.connect(conn_str)


def _create_task(title):
    """
    Create a task.
    """
    table = db['task']
    table.insert(dict(title=title, done=False))


@click.group()
def cli():
    pass

@click.command()
def config():
    for s in cfg.sections():
        for k,v in cfg[s].items():
            click.echo('{}: {}'.format(k,v))


@click.command()
@click.option('--count', default=1, help='some number')
@click.argument('name')
def hello(count, name):
    for x in range(count):
        click.echo('hello {}'.format(name))


@click.command('create-task')
@click.argument('title')
def create_task(title):
    _create_task(title)


@click.command('fetch-all')
def fetch_all():
    table = db['task']
    keys = ['title', 'done']
    pt = PrettyTable(keys)
    for r in table.all():
        pt.add_row([v for k,v in r.items() if k in keys])
    print(pt)


cli.add_command(config)
cli.add_command(hello)
cli.add_command(create_task)
cli.add_command(fetch_all)


if __name__ == '__main__':
    cli()
